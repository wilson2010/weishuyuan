<?xml version="1.0" encoding="UTF-8"?>
<web-app version="3.0" xmlns="http://java.sun.com/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd">


  <display-name>Archetype Created Web Application</display-name>

  <!-- 解决字符编码问题 字符过滤器-->
  <filter>
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>

  <!-- 2:部署spring容器的配置文件applicationContext.xml
         如果在web.xml中不写任何的参数配置信息，容器默认的路径是/WEB-INF/applicationContext.xml
         即如果在此目录下创建这个xml必须按照他的名字命名

         如果想要自定义容器的文件名，可以在web.xml中加入contextConfigLocation这个context参数
         在<param-value></param-value>里指定相应的xml文件名，如果由多个xml文件，可以卸载一起
         并以，分割
         也可以写成applicationContext-*.xml的方式通配所有，

         在contextLoaderListener中关联了contextLoader这个类，所以整个加载配置过程由ContextLoader这个类完成
   -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:spring/spring-*.xml</param-value>
  </context-param>

  <!-- 配置log4j -->
  <!-- 配置加载log4j.xml文件路径 -->
  <context-param>
      <param-name>log4jConfigLocation</param-name>
      <param-value>classpath:log4j.xml</param-value>
  </context-param>

  <!-- 配置log4j.xml变量 -->
  <context-param>
      <param-name>rootLevel</param-name>
      <param-value>DEBUG</param-value>
  </context-param>

  <context-param>
      <param-name>loggingLevel</param-name>
      <param-value>INFO</param-value>
  </context-param>

  <!-- 配置log4j.xml监听器 -->
  <listener>
    <listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
  </listener>

  <!--如果你的DispatcherServlet拦截"/"，为了实现REST风格，拦截了所有的请求，
  那么同时对*.js,*.jpg等静态文件的访问也就被拦截了。-->
  <!--方案一：激活Tomcat的defaultServlet来处理静态文件-->
  <!--要写在DispatcherServlet的前面， 让 defaultServlet先拦截请求，
  这样请求就不会进入Spring了，我想性能是最好的吧。-->
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.css</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.swf</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.gif</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.jpg</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.png</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.js</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.html</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.xml</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.json</url-pattern>
  </servlet-mapping>
  <servlet-mapping>
    <servlet-name>default</servlet-name>
    <url-pattern>*.map</url-pattern>
  </servlet-mapping>

  <!--使用Spring MVC,配置DispatcherServlet是第一步。DispatcherServlet是一个Servlet,,
  所以可以配置多个DispatcherServlet-->
  <!--DispatcherServlet是前置控制器，配置在web.xml文件中的。拦截匹配的请求，Servlet拦截匹配规则要自已定义，
  把拦截下来的请求，依据某某规则分发到目标Controller(我们写的Action)来处理。-->
  <!-- 前端控制器配置 -->
  <servlet>
    <servlet-name>springMvc</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 默认情况下：DispatcherServlet会寻找WEB-INF下，命名规范为[servlet-name]-servlet.xml文件。如：在上例中，它就会找/WEB-INF/spring-servlet.xml
47                                                     如果需要修改，需要在web.xml中的<servlet>标记中增加 <init-param>。。。  </init-param>：-->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <!--其中<param-value>**.xml</param-value> 这里可以使用多种写法-->
      <!--1、不写,使用默认值:/WEB-INF/<servlet-name>-servlet.xml-->
      <!--2、<param-value>/WEB-INF/classes/dispatcher-servlet.xml</param-value>-->
      <!--3、<param-value>classpath*:dispatcher-servlet.xml</param-value>-->
      <!--4、多个值用逗号分隔-->
      <param-value>classpath:spring/springMVC-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup><!--是启动顺序，让这个Servlet随Servletp容器一起启动。-->
  </servlet>
  <servlet-mapping>
    <!--这个Servlet的名字是dispatcher，
    可以有多个DispatcherServlet，是通过名字来区分的。每一个DispatcherServlet有自己的WebApplicationContext上下文对象。同时保存的ServletContext中和Request对象中.-->
    <!--ApplicationContext是Spring的核心，Context我们通常解释为上下文环境，
    我想用“容器”来表述它更容易理解一些，ApplicationContext则是“应用的容器”了:P，Spring把Bean放在这个容器中，在需要的时候，用getBean方法取出-->
    <servlet-name>springMvc</servlet-name>
    <!--Servlet拦截匹配规则可以自已定义，
    当映射为@RequestMapping("/user/add")时，为例,拦截哪种URL合适？-->
    <!--1、拦截*.do、*.htm， 例如：/user/add.do,这是最传统的方式，
    最简单也最实用。不会导致静态文件（jpg,js,css）被拦截。-->
    <!--2、拦截/，例如：/user/add,可以实现现在很流行的REST风格。
    很多互联网类型的应用很喜欢这种风格的URL。弊端：会导致静态文件（jpg,js,css）
    被拦截后不能正常显示。 -->
    <url-pattern>/</url-pattern> <!--会拦截URL中带“/”的请求。-->
  </servlet-mapping>


  <welcome-file-list><!--指定欢迎页面-->
    <welcome-file>login.html</welcome-file>
  </welcome-file-list>

  <!-- 当系统出现404错误的时候，跳转到页面noPage.html -->
  <error-page>
    <error-code>404</error-code>
    <location>/noPage.html</location>
  </error-page>

  <!-- 当系统出现java.lang.NullPointerException，跳转到error.html -->
  <error-page>
    <exception-type>java.lang.NullPointerException</exception-type>
    <location>/error.html</location>
  </error-page>

  <!-- 会话超时配置，单位分钟 -->
  <session-config>
    <session-timeout>30</session-timeout>
  </session-config>

  <!-- druid监控配置-->
  <filter>
    <filter-name>DruidWebStatFilter</filter-name>
    <filter-class>com.alibaba.druid.support.http.WebStatFilter</filter-class>
    <init-param>
      <param-name>exclusions</param-name>
      <param-value>/static/*,*.js,*.gif,*.jpg,*.png,*.css,*.ico,/druid/*</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>DruidWebStatFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
  <!-- druid监控 -->
  <servlet>
    <servlet-name>DruidStatView</servlet-name>
    <servlet-class>com.alibaba.druid.support.http.StatViewServlet</servlet-class>
  </servlet>
  <servlet-mapping>
    <servlet-name>DruidStatView</servlet-name>
    <url-pattern>/druid/*</url-pattern>
  </servlet-mapping>
</web-app>
